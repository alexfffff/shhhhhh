<!DOCTYPE html>
<html lang="en">
<head>
<title>Restaurants</title>
<link rel="stylesheet1" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx" crossorigin="anonymous"></script>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
<link rel = "stylesheet2"
                type = "text/css"
                href = "pennbook.css" />
</head>
<body>
	<!-- Restaurants page displaying restaurants on map -->
  	<%if (table != null) { %>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script defer
      src="https://maps.googleapis.com/maps/api/js?key=XXX&callback=initMap&libraries=&v=weekly">
    </script>
    <style type="text/css">
      /* Always set the map height explicitly to define the size of the div element that contains the map */
      #map {
        height: 100%;
      }

      /* Makes the sample page fill the window */
      html,
      body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
    </style>
  <!--The div elements for the map and top of page -->
  <h1><center><font color="white"><b>Restaurants</b></font></center></h1><div id="map"></div>
<br>
<!-- Allows user to add a new restaurant to table, must specify fields -->
<h2><center><font color="white">Add a new restaurant!</font></center></h2>
  <div class="login-box">
  	<form>
	  	<label><font color="white">Latitude: </font></label><input type="text" name="newLatitude" required size="20" class="form-control">
	    <label><font color="white">Longitude: </font></label><input type="text" name="newLongitude" required size="20" class="form-control">
	    <label><font color="white">Name: </font></label><input type="text" name="newName" required size="20" class="form-control">
	    <label><font color="white">Description: </font></label><input type="text" name="newDescription" required size="20" class="form-control"><br>
	    <button type="button" class="btn btn-lg btn-primary btn-block" onclick="addNewRestaurant()">Add</button>
  	</form>
  <script>
  	let map;
  	var restaurantNames = [];
  	var restaurantToMarkers = new Map();
  	
    // Initialize map centered on Philadelphia
    function initMap() {
    	// Location of Philadelphia
      	const philadelphia = { lat: 39.952583, lng: -75.165222 };
        map = new google.maps.Map(document.getElementById("map"), {
        	center: philadelphia,
        	zoom: 8
        });
        
        // Add markers for each restaurant in the database
        <%table.forEach(restaurant => { %>
        	var marker = new google.maps.Marker({
        		position: new google.maps.LatLng(parseFloat(<%=restaurant.latitude.S%>), parseFloat(<%=restaurant.longitude.S%>)),
        		map: map,
        		<%if (restaurant.creator.S === username) { %>
        			// Make marker yellow if it was added by the user currently logged in (otherwise it is red)
        			icon: {
        				url: "http://maps.google.com/mapfiles/ms/icons/yellow-dot.png"
        			}
        		<% } %>
        	});
        	
        	// Info windows for each marker, containing restaurant's name, description, and creator
        	marker.info = new google.maps.InfoWindow({
        		content: "<h1><b> <%=restaurant.name.S%> </b></h1>" +
        			"<p> Description: <%=restaurant.description.S%> </p>" +
        			"<p><i> Added by <%=restaurant.creator.S%> <i/></p>"
            });
            
            // Event listener to listen for left clicks on the marker, show popup when clicked
        	google.maps.event.addListener(marker, 'click', function() {
        		this.info.open(map, this);
            });
            
            // Event listener to listen for right clicks on the marker
        	google.maps.event.addListener(marker, 'rightclick', function() {
        		// Delete the marker if the current user created that marker
        		<%if (restaurant.creator.S === username) { %>
        			this.setMap(null);
        			// Delete restaurant from database (keyed by the restaurant name)
        			$.ajax({
						url: "/deleterestaurant",
						type: "POST",
						data:
							{
								name: "<%=restaurant.name.S%>"
							}
						})
        		<% } else { %>
        			alert("Error: Cannot delete someone else's restaurant.");
        		<% } %>
            });
            
            // Add the restaurant to the data stored on the client side
            restaurantNames.push("<%=restaurant.name.S%>");
            restaurantToMarkers.set("<%=restaurant.name.S%>", marker);
        <% }) %>
        
        // Event listener for clicks on the map (not on markers)
        google.maps.event.addListener(map, 'click', function (event) {
        	// Fill out the latitude and longitude forms based on position of click on map
        	$('input[name="newLatitude"]').val(event.latLng.lat());
        	$('input[name="newLongitude"]').val(event.latLng.lng());
        });
      }
    
    // Add a new restaurant if the user clicks on the add button
  	function addNewRestaurant() {
  		var latitude = $('input[name="newLatitude"]').val();
  		var longitude = $('input[name="newLongitude"]').val();
  		var restaurantName = $('input[name="newName"]').val();
  		var description = $('input[name="newDescription"]').val();
			
		// Check for valid inputs, show an error alert if missing fields
		if (restaurantName === null || restaurantName === "" || description === null || description === "" || 
			latitude === null || latitude === "" || longitude === null || longitude === "") {
				alert("Error: Missing fields, please complete all fields.");
		} else if (Number.isNaN(parseFloat(latitude)) || Number.isNaN(parseFloat(longitude))) {
			alert("Error: Latitude and longitude must be numbers.");
		} else if (parseFloat(latitude) < -90 || parseFloat(latitude) > 90 || 
			parseFloat(longitude) < -180 || parseFloat(longitude) > 180) {
			alert("Error: Latitude and longitude out of range.\nPlease specify in the following ranges:\n" + 
				"Latitude: [-90, 90]\nLongitude: [-180, 180]");
		} else {
			// All inputs are valid, make AJAX call, POST request to add restaurant
			$.ajax({
				url: "/addrestaurant",
				type: "POST",
				data:
					{
						newName: restaurantName,
						newLatitude: latitude,
						newLongitude: longitude,
						newDescription: description
					},
					
				// Add new marker to the map on success
				success: function(data) {
					// Check if the data sent from the server contains an error
					if (!data.error) {
						var newMarker = new google.maps.Marker({
			        		position: new google.maps.LatLng(parseFloat(latitude), parseFloat(longitude)),
			        		map: map,
			        		icon: {
			        			url: "http://maps.google.com/mapfiles/ms/icons/yellow-dot.png"
			        		}
			        	});
			        	
			        	newMarker.info = new google.maps.InfoWindow({
			        		content: "<h1><b>" + restaurantName + "</b></h1>" +
			        			"<p> Description: " + description + "</p>" +
			        			"<p><i> Added by <%=username%> <i/></p>"
			            });
			            
			        	google.maps.event.addListener(newMarker, 'click', function() {
			                  this.info.open(map, this);
			            });
			            
			            // Delete the marker on a right click
			            google.maps.event.addListener(newMarker, 'rightclick', function() {
		        			// No need to check for matching username since we know this user added this restaurant
		        			this.setMap(null);
		        			$.ajax({
								url: "/deleterestaurant",
								type: "POST",
								data:
									{
										name: "" + $('input[name="newName"]').val()
									}
								})
		            	});
		            	
		            	// Add the restaurant to the data stored on the client side
		            	restaurantNames.push(restaurantName);
		            	restaurantToMarkers.set(restaurantName, newMarker);
		            } else {
		            	alert(data.error);
		            }
	     		}
	     	})
	    }
	}
	
	var refreshTime = function() {
		// Set clock to refresh every 5000 ms
		$("#clock").html((new Date()).toString());
		setTimeout(refreshTime, 5000);
		// Make AJAX call and compare the data from the server to the data on the client
		$.ajax({
				url: "/restaurantsList",
				type: "GET",
				success: function(data) {
					// Lists containing the differences between the server and client
					var dataNames = [];
					var inDataNotInRestaurants = [];
					var inRestaurantsNotInData = [];
					
					data.forEach(r1 => {
						dataNames.push(r1.name.S);
						// Put the restaurant in the list if it's from the server but not on the client
						if (!restaurantNames.includes(r1.name.S)) {
							inDataNotInRestaurants.push(r1);
						}
					});

					restaurantNames.forEach(r2 => {
						if (!dataNames.includes(r2)) {
							// Put the restaurant in the list if it's on the client but not on the server
							inRestaurantsNotInData.push(r2);
						}
					});
					
					// Draw a new marker on the map for every restaurant on the server that's not on the client
					inDataNotInRestaurants.forEach(rNew => {
						var updatedMarker = new google.maps.Marker({
			        		position: new google.maps.LatLng(parseFloat(rNew.latitude.S), parseFloat(rNew.longitude.S)),
			        		map: map
			        	});
        	
			        	updatedMarker.info = new google.maps.InfoWindow({
			        		content: "<h1><b>" + rNew.name.S + "</b></h1>" +
			        			"<p> Description: " + rNew.description.S + "</p>" +
			        			"<p><i> Added by " + rNew.creator.S + "<i/></p>"
			            });
			            
			        	google.maps.event.addListener(updatedMarker, 'click', function() {
			        		this.info.open(map, this);
			            });
			            
			        	google.maps.event.addListener(updatedMarker, 'rightclick', function() {
			        		// Restaurants sent from the server must have been created by other users
			        		alert("Error: Cannot delete someone else's restaurant.");
			            });
			            
			            // Update the data on the client to reflect the new restaurants
			            restaurantNames.push(rNew.name.S);
			            restaurantToMarkers.set(rNew.name.S, updatedMarker);
					});
					
					// Delete a marker on the map for every restaurant on the client but not on the server
					inRestaurantsNotInData.forEach(rToDelete => {
			        	// Delete the marker from the map
			        	var markerToDelete = restaurantToMarkers.get(rToDelete);
			        	markerToDelete.setMap(null);
			        	
			        	// Delete the restaurant from the client
			        	var index = restaurantNames.indexOf(rToDelete);
			        	if (index > -1) {
			        		restaurantNames.splice(index, 1);
			        	}
			        	restaurantToMarkers.delete(rToDelete);
					});
				},
				error: function(err) {
					alert(err);
				}
			})
	};
	
	$(document).ready(function() {
		$("#clock").css("color", "white");
		setTimeout(refreshTime, 5000);
	});
	
  </script>
	<% } %>
	<% if (message != null) { %>
		<font color="red"><%= message %><p>
		<font color="black"><a href="http://localhost:8080/restaurants">Go back to restaurants</a><p>
	<% } %>
  <br><br><br><br><br><br><br>
  <!-- Display the current time in 5 second intervals (initially black text, hidden on page) -->
  <div id="clock"><center><font color="black">Please wait 5 seconds for the time to appear.</font></center></div><br>
  <!-- Display user's username if they are logged in -->
  <%if (username != null) { %>
  	<div class="alert alert-info" role="alert"><center>Logged in as user: <em><strong><%= username %></strong></em></center></div>
  <% } %>
  <!-- Button with link to logout of user account -->
	<div class="login-box">
		<center><a class="btn btn-primary btn-lg btn-block" href="http://localhost:8080/logout" role="button">Logout</a></center>
	</div>
</body>
</html>
